// /* ************************************************************************** */
// /*                                                                            */
// /*                                                        :::      ::::::::   */
// /*   matrix_to_solution                                 :+:      :+:    :+:   */
// /*                                                    +:+ +:+         +:+     */
// /*   By: yzeybek <yzeybek@student.42istanbul.com    +#+  +:+       +#+        */
// /*                                                +#+#+#+#+#+   +#+           */
// /*   Created: 2024/08/31 19:18:40 by ibayandu          #+#    #+#             */
// /*   Updated: 2024/09/01 13:59:35 by yzeybek          ###   ########.fr       */
// /*                                                                            */
// /* ************************************************************************** */

// #include "../includes/bsq.h"
// #include "../includes/commons.h"
// #include <libc.h>


// int	**ft_splitted_to_matris(t_map map)
// {
// 	int	**matris;
// 	int	i;
// 	int	column;

// 	i = 0;
// 	column = ft_strlen(map.map_content[1]);
// 	matris = (int **)malloc(map.line_count * sizeof(int *));
// 	while (i < map.line_count)
// 		matris[i++] = (int *)malloc(column * sizeof(int));
// 	while (map.line_count--)
// 	{
// 		column = ft_strlen(map.map_content[1]);
// 		while (column--)
// 		{
// 			if (map.map_content[map.line_count][column] == map.empty)
// 				matris[map.line_count][column] = 1;
// 			else if (map.map_content[map.line_count][column] == map.obstacle)
// 				matris[map.line_count][column] = 0;
// 		}
// 	}
// 	return (matris);
// }
